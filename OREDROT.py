import os
import sys
import nmap
import requests
from time import sleep
from fake_useragent import UserAgent
from stem import Signal
from stem.control import Controller

# ASCII-–∞—Ä—Ç –≤ —Å—Ç–∏–ª–µ webrootkit
BANNER = r"""
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   
                                                             
                   by webrootkit | @webrootkit.matrix.org
"""

# –ú–µ–Ω—é
def show_menu():
    os.system("clear" if os.name == "posix" else "cls")
    print(BANNER)
    print("\n[1] –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å (Nmap)")
    print("[2] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å email –Ω–∞ —É—Ç–µ—á–∫–∏")
    print("[3] –ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ä–∫–Ω–µ—Ç (Tor)")
    print("[4] –ê–Ω–∞–ª–∏–∑ Bitcoin-–∫–æ—à–µ–ª—å–∫–∞")
    print("[5] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("[6] –í—ã—Ö–æ–¥\n")

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ Kyosuke)
def fake_data_generator():
    ua = UserAgent()
    fake_name = ua.first_name + " " + ua.last_name
    fake_email = f"{ua.username.lower()}@protonmail.com"
    fake_address = f"{ua.random.randint(1, 200)} {ua.street_suffix()}, {ua.city()}"
    
    print("\n[üîÆ] –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  üë§ –ò–º—è: {fake_name}")
    print(f"  üìß Email: {fake_email}")
    print(f"  üè† –ê–¥—Ä–µ—Å: {fake_address}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin-–∫–æ—à–µ–ª—å–∫–∞
def check_btc_wallet():
    wallet = input("\n[+] –í–≤–µ–¥–∏—Ç–µ BTC-–∞–¥—Ä–µ—Å: ")
    try:
        response = requests.get(f"https://blockchain.info/rawaddr/{wallet}")
        data = response.json()
        print(f"\n[üí∞] –ë–∞–ª–∞–Ω—Å: {data['final_balance'] / 100000000} BTC")
        print(f"[üîó] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['n_tx']}")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞: {e}")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
def main():
    while True:
        show_menu()
        choice = input("\n[?] –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ > ")
        
        if choice == "1":
            target = input("[üéØ] –í–≤–µ–¥–∏—Ç–µ IP/–¥–æ–º–µ–Ω: ")
            os.system(f"nmap -sV -T4 {target}")
        elif choice == "2":
            email = input("[üìß] –í–≤–µ–¥–∏—Ç–µ email: ")
            check_leaks(email)
        elif choice == "3":
            darknet_parser()
        elif choice == "4":
            check_btc_wallet()
        elif choice == "5":
            fake_data_generator()
        elif choice == "6":
            print("\n[üñ§] by webrootkit | –î–æ —Å–∫–æ—Ä–æ–≥–æ!")
            sys.exit()
        else:
            print("\n[!] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        
        input("\n[‚Üµ] –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

if __name__ == "__main__":
    main()