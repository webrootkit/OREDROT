import os
import sys
import nmap
import requests
from time import sleep
from fake_useragent import UserAgent
from stem import Signal
from stem.control import Controller

# ASCII-–∞—Ä—Ç –≤ —Å—Ç–∏–ª–µ webrootkit
BANNER = r"""
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   
                                                             
                   by webrootkit | @webrootkit.matrix.org
"""

def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")

def show_menu():
    clear_screen()
    print(BANNER)
    print("\n[1] –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å (Nmap)")
    print("[2] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å email –Ω–∞ —É—Ç–µ—á–∫–∏")
    print("[3] –ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ä–∫–Ω–µ—Ç (Tor)")
    print("[4] –ê–Ω–∞–ª–∏–∑ Bitcoin-–∫–æ—à–µ–ª—å–∫–∞")
    print("[5] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("[6] –í—ã—Ö–æ–¥\n")

def scan_network():
    target = input("[üéØ] –í–≤–µ–¥–∏—Ç–µ IP/–¥–æ–º–µ–Ω: ")
    try:
        nm = nmap.PortScanner()
        print(f"\n[üîç] –°–∫–∞–Ω–∏—Ä—É—é {target}...")
        nm.scan(hosts=target, arguments='-T4 -A -v')
        
        print("\n[üìä] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for host in nm.all_hosts():
            print(f"\n[üñ•Ô∏è] –•–æ—Å—Ç: {host} ({nm[host].hostname()})")
            print(f"[üîí] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {nm[host].state()}")
            
            for proto in nm[host].all_protocols():
                print(f"\n[üì°] –ü—Ä–æ—Ç–æ–∫–æ–ª: {proto}")
                ports = nm[host][proto].keys()
                for port in sorted(ports):
                    print(f"  üö™ –ü–æ—Ä—Ç: {port}\t–°–µ—Ä–≤–∏—Å: {nm[host][proto][port]['name']}\t–°–æ—Å—Ç–æ—è–Ω–∏–µ: {nm[host][proto][port]['state']}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def check_leaks(email):
    try:
        url = f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}"
        headers = {"hibp-api-key": "–≤–∞—à_api_–∫–ª—é—á"}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("\n[üíÄ] –ù–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö:")
            for breach in response.json():
                print(f"  üî• {breach['Name']} ({breach['BreachDate']})")
        else:
            print("\n[‚úÖ] –£—Ç–µ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    except Exception as e:
        print(f"\n[‚ùå] –û—à–∏–±–∫–∞: {e}")

def darknet_parser():
    print("\n[üåë] –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Tor

def check_btc_wallet():
    wallet = input("\n[+] –í–≤–µ–¥–∏—Ç–µ BTC-–∞–¥—Ä–µ—Å: ")
    try:
        response = requests.get(f"https://blockchain.info/rawaddr/{wallet}", timeout=10)
        data = response.json()
        print(f"\n[üí∞] –ë–∞–ª–∞–Ω—Å: {data['final_balance'] / 100000000:.8f} BTC")
        print(f"[üîó] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['n_tx']}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞: {e}")

def fake_data_generator():
    ua = UserAgent()
    fake_name = f"{ua.first_name()} {ua.last_name()}"
    fake_email = f"{ua.user_name()}@protonmail.com"
    fake_address = f"{ua.random.randint(1, 200)} {ua.street_suffix()}, {ua.city()}"
    
    print("\n[üîÆ] –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  üë§ –ò–º—è: {fake_name}")
    print(f"  üìß Email: {fake_email}")
    print(f"  üè† –ê–¥—Ä–µ—Å: {fake_address}")

def main():
    while True:
        show_menu()
        choice = input("\n[?] –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ > ")
        
        if choice == "1":
            scan_network()
        elif choice == "2":
            email = input("[üìß] –í–≤–µ–¥–∏—Ç–µ email: ")
            check_leaks(email)
        elif choice == "3":
            darknet_parser()
        elif choice == "4":
            check_btc_wallet()
        elif choice == "5":
            fake_data_generator()
        elif choice == "6":
            print("\n[üñ§] by webrootkit | –î–æ —Å–∫–æ—Ä–æ–≥–æ!")
            sys.exit()
        else:
            print("\n[‚ö†Ô∏è] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        
        input("\n[‚Üµ] –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[üõë] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
